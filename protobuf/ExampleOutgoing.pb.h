// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ExampleOutgoing.proto
// Protobuf C++ Version: 5.29.3

#ifndef ExampleOutgoing_2eproto_2epb_2eh
#define ExampleOutgoing_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ExampleOutgoing_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ExampleOutgoing_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ExampleOutgoing_2eproto;
class Outgoing;
struct OutgoingDefaultTypeInternal;
extern OutgoingDefaultTypeInternal _Outgoing_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class Vector3D;
struct Vector3DDefaultTypeInternal;
extern Vector3DDefaultTypeInternal _Vector3D_default_instance_;
class VehicleOutgoing;
struct VehicleOutgoingDefaultTypeInternal;
extern VehicleOutgoingDefaultTypeInternal _VehicleOutgoing_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Vector3D final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Vector3D) */ {
 public:
  inline Vector3D() : Vector3D(nullptr) {}
  ~Vector3D() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Vector3D* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Vector3D));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vector3D(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vector3D(const Vector3D& from) : Vector3D(nullptr, from) {}
  inline Vector3D(Vector3D&& from) noexcept
      : Vector3D(nullptr, std::move(from)) {}
  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3D& operator=(Vector3D&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3D* internal_default_instance() {
    return reinterpret_cast<const Vector3D*>(
        &_Vector3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Vector3D& a, Vector3D& b) { a.Swap(&b); }
  inline void Swap(Vector3D* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3D* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3D* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Vector3D>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vector3D& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vector3D& from) { Vector3D::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Vector3D* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Vector3D"; }

 protected:
  explicit Vector3D(::google::protobuf::Arena* arena);
  Vector3D(::google::protobuf::Arena* arena, const Vector3D& from);
  Vector3D(::google::protobuf::Arena* arena, Vector3D&& from) noexcept
      : Vector3D(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:Vector3D)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Vector3D& from_msg);
    float x_;
    float y_;
    float z_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExampleOutgoing_2eproto;
};
// -------------------------------------------------------------------

class Transform final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Transform* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Transform));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Transform(
      ::google::protobuf::internal::ConstantInitialized);

  inline Transform(const Transform& from) : Transform(nullptr, from) {}
  inline Transform(Transform&& from) noexcept
      : Transform(nullptr, std::move(from)) {}
  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
        &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Transform& a, Transform& b) { a.Swap(&b); }
  inline void Swap(Transform* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Transform>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Transform& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Transform& from) { Transform::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Transform* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Transform"; }

 protected:
  explicit Transform(::google::protobuf::Arena* arena);
  Transform(::google::protobuf::Arena* arena, const Transform& from);
  Transform(::google::protobuf::Arena* arena, Transform&& from) noexcept
      : Transform(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .Vector3D position = 1;
  bool has_position() const;
  void clear_position() ;
  const ::Vector3D& position() const;
  PROTOBUF_NODISCARD ::Vector3D* release_position();
  ::Vector3D* mutable_position();
  void set_allocated_position(::Vector3D* value);
  void unsafe_arena_set_allocated_position(::Vector3D* value);
  ::Vector3D* unsafe_arena_release_position();

  private:
  const ::Vector3D& _internal_position() const;
  ::Vector3D* _internal_mutable_position();

  public:
  // .Vector3D rotation = 2;
  bool has_rotation() const;
  void clear_rotation() ;
  const ::Vector3D& rotation() const;
  PROTOBUF_NODISCARD ::Vector3D* release_rotation();
  ::Vector3D* mutable_rotation();
  void set_allocated_rotation(::Vector3D* value);
  void unsafe_arena_set_allocated_rotation(::Vector3D* value);
  ::Vector3D* unsafe_arena_release_rotation();

  private:
  const ::Vector3D& _internal_rotation() const;
  ::Vector3D* _internal_mutable_rotation();

  public:
  // @@protoc_insertion_point(class_scope:Transform)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Transform& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector3D* position_;
    ::Vector3D* rotation_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExampleOutgoing_2eproto;
};
// -------------------------------------------------------------------

class VehicleOutgoing final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:VehicleOutgoing) */ {
 public:
  inline VehicleOutgoing() : VehicleOutgoing(nullptr) {}
  ~VehicleOutgoing() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VehicleOutgoing* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VehicleOutgoing));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleOutgoing(
      ::google::protobuf::internal::ConstantInitialized);

  inline VehicleOutgoing(const VehicleOutgoing& from) : VehicleOutgoing(nullptr, from) {}
  inline VehicleOutgoing(VehicleOutgoing&& from) noexcept
      : VehicleOutgoing(nullptr, std::move(from)) {}
  inline VehicleOutgoing& operator=(const VehicleOutgoing& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleOutgoing& operator=(VehicleOutgoing&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleOutgoing& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleOutgoing* internal_default_instance() {
    return reinterpret_cast<const VehicleOutgoing*>(
        &_VehicleOutgoing_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(VehicleOutgoing& a, VehicleOutgoing& b) { a.Swap(&b); }
  inline void Swap(VehicleOutgoing* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleOutgoing* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleOutgoing* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VehicleOutgoing>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehicleOutgoing& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VehicleOutgoing& from) { VehicleOutgoing::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VehicleOutgoing* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "VehicleOutgoing"; }

 protected:
  explicit VehicleOutgoing(::google::protobuf::Arena* arena);
  VehicleOutgoing(::google::protobuf::Arena* arena, const VehicleOutgoing& from);
  VehicleOutgoing(::google::protobuf::Arena* arena, VehicleOutgoing&& from) noexcept
      : VehicleOutgoing(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kAccelerationFieldNumber = 2,
    kAngularVelocityFieldNumber = 3,
    kTransformFieldNumber = 4,
    kVelocityFieldNumber = 5,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .Vector3D acceleration = 2;
  bool has_acceleration() const;
  void clear_acceleration() ;
  const ::Vector3D& acceleration() const;
  PROTOBUF_NODISCARD ::Vector3D* release_acceleration();
  ::Vector3D* mutable_acceleration();
  void set_allocated_acceleration(::Vector3D* value);
  void unsafe_arena_set_allocated_acceleration(::Vector3D* value);
  ::Vector3D* unsafe_arena_release_acceleration();

  private:
  const ::Vector3D& _internal_acceleration() const;
  ::Vector3D* _internal_mutable_acceleration();

  public:
  // .Vector3D angularVelocity = 3;
  bool has_angularvelocity() const;
  void clear_angularvelocity() ;
  const ::Vector3D& angularvelocity() const;
  PROTOBUF_NODISCARD ::Vector3D* release_angularvelocity();
  ::Vector3D* mutable_angularvelocity();
  void set_allocated_angularvelocity(::Vector3D* value);
  void unsafe_arena_set_allocated_angularvelocity(::Vector3D* value);
  ::Vector3D* unsafe_arena_release_angularvelocity();

  private:
  const ::Vector3D& _internal_angularvelocity() const;
  ::Vector3D* _internal_mutable_angularvelocity();

  public:
  // .Transform transform = 4;
  bool has_transform() const;
  void clear_transform() ;
  const ::Transform& transform() const;
  PROTOBUF_NODISCARD ::Transform* release_transform();
  ::Transform* mutable_transform();
  void set_allocated_transform(::Transform* value);
  void unsafe_arena_set_allocated_transform(::Transform* value);
  ::Transform* unsafe_arena_release_transform();

  private:
  const ::Transform& _internal_transform() const;
  ::Transform* _internal_mutable_transform();

  public:
  // .Vector3D velocity = 5;
  bool has_velocity() const;
  void clear_velocity() ;
  const ::Vector3D& velocity() const;
  PROTOBUF_NODISCARD ::Vector3D* release_velocity();
  ::Vector3D* mutable_velocity();
  void set_allocated_velocity(::Vector3D* value);
  void unsafe_arena_set_allocated_velocity(::Vector3D* value);
  ::Vector3D* unsafe_arena_release_velocity();

  private:
  const ::Vector3D& _internal_velocity() const;
  ::Vector3D* _internal_mutable_velocity();

  public:
  // @@protoc_insertion_point(class_scope:VehicleOutgoing)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      28, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VehicleOutgoing& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::Vector3D* acceleration_;
    ::Vector3D* angularvelocity_;
    ::Transform* transform_;
    ::Vector3D* velocity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExampleOutgoing_2eproto;
};
// -------------------------------------------------------------------

class Outgoing final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Outgoing) */ {
 public:
  inline Outgoing() : Outgoing(nullptr) {}
  ~Outgoing() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Outgoing* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Outgoing));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Outgoing(
      ::google::protobuf::internal::ConstantInitialized);

  inline Outgoing(const Outgoing& from) : Outgoing(nullptr, from) {}
  inline Outgoing(Outgoing&& from) noexcept
      : Outgoing(nullptr, std::move(from)) {}
  inline Outgoing& operator=(const Outgoing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Outgoing& operator=(Outgoing&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Outgoing& default_instance() {
    return *internal_default_instance();
  }
  static inline const Outgoing* internal_default_instance() {
    return reinterpret_cast<const Outgoing*>(
        &_Outgoing_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Outgoing& a, Outgoing& b) { a.Swap(&b); }
  inline void Swap(Outgoing* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Outgoing* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Outgoing* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Outgoing>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Outgoing& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Outgoing& from) { Outgoing::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Outgoing* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Outgoing"; }

 protected:
  explicit Outgoing(::google::protobuf::Arena* arena);
  Outgoing(::google::protobuf::Arena* arena, const Outgoing& from);
  Outgoing(::google::protobuf::Arena* arena, Outgoing&& from) noexcept
      : Outgoing(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVehiclesFieldNumber = 1,
  };
  // repeated .VehicleOutgoing vehicles = 1;
  int vehicles_size() const;
  private:
  int _internal_vehicles_size() const;

  public:
  void clear_vehicles() ;
  ::VehicleOutgoing* mutable_vehicles(int index);
  ::google::protobuf::RepeatedPtrField<::VehicleOutgoing>* mutable_vehicles();

  private:
  const ::google::protobuf::RepeatedPtrField<::VehicleOutgoing>& _internal_vehicles() const;
  ::google::protobuf::RepeatedPtrField<::VehicleOutgoing>* _internal_mutable_vehicles();
  public:
  const ::VehicleOutgoing& vehicles(int index) const;
  ::VehicleOutgoing* add_vehicles();
  const ::google::protobuf::RepeatedPtrField<::VehicleOutgoing>& vehicles() const;
  // @@protoc_insertion_point(class_scope:Outgoing)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Outgoing& from_msg);
    ::google::protobuf::RepeatedPtrField< ::VehicleOutgoing > vehicles_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExampleOutgoing_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Vector3D

// float x = 1;
inline void Vector3D::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:Vector3D.x)
  return _internal_x();
}
inline void Vector3D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vector3D.x)
}
inline float Vector3D::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Vector3D::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 2;
inline void Vector3D::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:Vector3D.y)
  return _internal_y();
}
inline void Vector3D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vector3D.y)
}
inline float Vector3D::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Vector3D::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float z = 3;
inline void Vector3D::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:Vector3D.z)
  return _internal_z();
}
inline void Vector3D::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Vector3D.z)
}
inline float Vector3D::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void Vector3D::_internal_set_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// Transform

// .Vector3D position = 1;
inline bool Transform::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void Transform::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Vector3D& Transform::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector3D* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3D&>(::_Vector3D_default_instance_);
}
inline const ::Vector3D& Transform::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Transform.position)
  return _internal_position();
}
inline void Transform::unsafe_arena_set_allocated_position(::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Transform.position)
}
inline ::Vector3D* Transform::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector3D* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Vector3D* Transform::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Transform.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Vector3D* Transform::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector3D>(GetArena());
    _impl_.position_ = reinterpret_cast<::Vector3D*>(p);
  }
  return _impl_.position_;
}
inline ::Vector3D* Transform::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector3D* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Transform.position)
  return _msg;
}
inline void Transform::set_allocated_position(::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:Transform.position)
}

// .Vector3D rotation = 2;
inline bool Transform::has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline void Transform::clear_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector3D& Transform::_internal_rotation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector3D* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3D&>(::_Vector3D_default_instance_);
}
inline const ::Vector3D& Transform::rotation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Transform.rotation)
  return _internal_rotation();
}
inline void Transform::unsafe_arena_set_allocated_rotation(::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = reinterpret_cast<::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Transform.rotation)
}
inline ::Vector3D* Transform::release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector3D* released = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Vector3D* Transform::unsafe_arena_release_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Transform.rotation)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector3D* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Vector3D* Transform::_internal_mutable_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector3D>(GetArena());
    _impl_.rotation_ = reinterpret_cast<::Vector3D*>(p);
  }
  return _impl_.rotation_;
}
inline ::Vector3D* Transform::mutable_rotation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector3D* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Transform.rotation)
  return _msg;
}
inline void Transform::set_allocated_rotation(::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rotation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rotation_ = reinterpret_cast<::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:Transform.rotation)
}

// -------------------------------------------------------------------

// VehicleOutgoing

// string name = 1;
inline void VehicleOutgoing::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VehicleOutgoing::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:VehicleOutgoing.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehicleOutgoing::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:VehicleOutgoing.name)
}
inline std::string* VehicleOutgoing::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:VehicleOutgoing.name)
  return _s;
}
inline const std::string& VehicleOutgoing::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void VehicleOutgoing::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* VehicleOutgoing::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* VehicleOutgoing::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:VehicleOutgoing.name)
  return _impl_.name_.Release();
}
inline void VehicleOutgoing::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:VehicleOutgoing.name)
}

// .Vector3D acceleration = 2;
inline bool VehicleOutgoing::has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.acceleration_ != nullptr);
  return value;
}
inline void VehicleOutgoing::clear_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Vector3D& VehicleOutgoing::_internal_acceleration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector3D* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3D&>(::_Vector3D_default_instance_);
}
inline const ::Vector3D& VehicleOutgoing::acceleration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:VehicleOutgoing.acceleration)
  return _internal_acceleration();
}
inline void VehicleOutgoing::unsafe_arena_set_allocated_acceleration(::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = reinterpret_cast<::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VehicleOutgoing.acceleration)
}
inline ::Vector3D* VehicleOutgoing::release_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector3D* released = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Vector3D* VehicleOutgoing::unsafe_arena_release_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:VehicleOutgoing.acceleration)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector3D* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::Vector3D* VehicleOutgoing::_internal_mutable_acceleration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.acceleration_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector3D>(GetArena());
    _impl_.acceleration_ = reinterpret_cast<::Vector3D*>(p);
  }
  return _impl_.acceleration_;
}
inline ::Vector3D* VehicleOutgoing::mutable_acceleration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector3D* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:VehicleOutgoing.acceleration)
  return _msg;
}
inline void VehicleOutgoing::set_allocated_acceleration(::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.acceleration_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.acceleration_ = reinterpret_cast<::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:VehicleOutgoing.acceleration)
}

// .Vector3D angularVelocity = 3;
inline bool VehicleOutgoing::has_angularvelocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angularvelocity_ != nullptr);
  return value;
}
inline void VehicleOutgoing::clear_angularvelocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angularvelocity_ != nullptr) _impl_.angularvelocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector3D& VehicleOutgoing::_internal_angularvelocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector3D* p = _impl_.angularvelocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3D&>(::_Vector3D_default_instance_);
}
inline const ::Vector3D& VehicleOutgoing::angularvelocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:VehicleOutgoing.angularVelocity)
  return _internal_angularvelocity();
}
inline void VehicleOutgoing::unsafe_arena_set_allocated_angularvelocity(::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angularvelocity_);
  }
  _impl_.angularvelocity_ = reinterpret_cast<::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VehicleOutgoing.angularVelocity)
}
inline ::Vector3D* VehicleOutgoing::release_angularvelocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector3D* released = _impl_.angularvelocity_;
  _impl_.angularvelocity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Vector3D* VehicleOutgoing::unsafe_arena_release_angularvelocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:VehicleOutgoing.angularVelocity)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector3D* temp = _impl_.angularvelocity_;
  _impl_.angularvelocity_ = nullptr;
  return temp;
}
inline ::Vector3D* VehicleOutgoing::_internal_mutable_angularvelocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angularvelocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector3D>(GetArena());
    _impl_.angularvelocity_ = reinterpret_cast<::Vector3D*>(p);
  }
  return _impl_.angularvelocity_;
}
inline ::Vector3D* VehicleOutgoing::mutable_angularvelocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector3D* _msg = _internal_mutable_angularvelocity();
  // @@protoc_insertion_point(field_mutable:VehicleOutgoing.angularVelocity)
  return _msg;
}
inline void VehicleOutgoing::set_allocated_angularvelocity(::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.angularvelocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.angularvelocity_ = reinterpret_cast<::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:VehicleOutgoing.angularVelocity)
}

// .Transform transform = 4;
inline bool VehicleOutgoing::has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline void VehicleOutgoing::clear_transform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Transform& VehicleOutgoing::_internal_transform() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Transform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Transform&>(::_Transform_default_instance_);
}
inline const ::Transform& VehicleOutgoing::transform() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:VehicleOutgoing.transform)
  return _internal_transform();
}
inline void VehicleOutgoing::unsafe_arena_set_allocated_transform(::Transform* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = reinterpret_cast<::Transform*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VehicleOutgoing.transform)
}
inline ::Transform* VehicleOutgoing::release_transform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Transform* released = _impl_.transform_;
  _impl_.transform_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Transform* VehicleOutgoing::unsafe_arena_release_transform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:VehicleOutgoing.transform)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::Transform* VehicleOutgoing::_internal_mutable_transform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.transform_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Transform>(GetArena());
    _impl_.transform_ = reinterpret_cast<::Transform*>(p);
  }
  return _impl_.transform_;
}
inline ::Transform* VehicleOutgoing::mutable_transform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:VehicleOutgoing.transform)
  return _msg;
}
inline void VehicleOutgoing::set_allocated_transform(::Transform* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.transform_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.transform_ = reinterpret_cast<::Transform*>(value);
  // @@protoc_insertion_point(field_set_allocated:VehicleOutgoing.transform)
}

// .Vector3D velocity = 5;
inline bool VehicleOutgoing::has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline void VehicleOutgoing::clear_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::Vector3D& VehicleOutgoing::_internal_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector3D* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3D&>(::_Vector3D_default_instance_);
}
inline const ::Vector3D& VehicleOutgoing::velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:VehicleOutgoing.velocity)
  return _internal_velocity();
}
inline void VehicleOutgoing::unsafe_arena_set_allocated_velocity(::Vector3D* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = reinterpret_cast<::Vector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VehicleOutgoing.velocity)
}
inline ::Vector3D* VehicleOutgoing::release_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Vector3D* released = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Vector3D* VehicleOutgoing::unsafe_arena_release_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:VehicleOutgoing.velocity)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Vector3D* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::Vector3D* VehicleOutgoing::_internal_mutable_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector3D>(GetArena());
    _impl_.velocity_ = reinterpret_cast<::Vector3D*>(p);
  }
  return _impl_.velocity_;
}
inline ::Vector3D* VehicleOutgoing::mutable_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::Vector3D* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:VehicleOutgoing.velocity)
  return _msg;
}
inline void VehicleOutgoing::set_allocated_velocity(::Vector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.velocity_ = reinterpret_cast<::Vector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:VehicleOutgoing.velocity)
}

// -------------------------------------------------------------------

// Outgoing

// repeated .VehicleOutgoing vehicles = 1;
inline int Outgoing::_internal_vehicles_size() const {
  return _internal_vehicles().size();
}
inline int Outgoing::vehicles_size() const {
  return _internal_vehicles_size();
}
inline void Outgoing::clear_vehicles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicles_.Clear();
}
inline ::VehicleOutgoing* Outgoing::mutable_vehicles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Outgoing.vehicles)
  return _internal_mutable_vehicles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::VehicleOutgoing>* Outgoing::mutable_vehicles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Outgoing.vehicles)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_vehicles();
}
inline const ::VehicleOutgoing& Outgoing::vehicles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Outgoing.vehicles)
  return _internal_vehicles().Get(index);
}
inline ::VehicleOutgoing* Outgoing::add_vehicles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::VehicleOutgoing* _add = _internal_mutable_vehicles()->Add();
  // @@protoc_insertion_point(field_add:Outgoing.vehicles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::VehicleOutgoing>& Outgoing::vehicles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Outgoing.vehicles)
  return _internal_vehicles();
}
inline const ::google::protobuf::RepeatedPtrField<::VehicleOutgoing>&
Outgoing::_internal_vehicles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicles_;
}
inline ::google::protobuf::RepeatedPtrField<::VehicleOutgoing>*
Outgoing::_internal_mutable_vehicles() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.vehicles_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ExampleOutgoing_2eproto_2epb_2eh
