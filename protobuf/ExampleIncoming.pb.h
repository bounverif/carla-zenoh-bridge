// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ExampleIncoming.proto
// Protobuf C++ Version: 5.29.3

#ifndef ExampleIncoming_2eproto_2epb_2eh
#define ExampleIncoming_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ExampleIncoming_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ExampleIncoming_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ExampleIncoming_2eproto;
class Incoming;
struct IncomingDefaultTypeInternal;
extern IncomingDefaultTypeInternal _Incoming_default_instance_;
class VehicleIncoming;
struct VehicleIncomingDefaultTypeInternal;
extern VehicleIncomingDefaultTypeInternal _VehicleIncoming_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class VehicleIncoming final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:VehicleIncoming) */ {
 public:
  inline VehicleIncoming() : VehicleIncoming(nullptr) {}
  ~VehicleIncoming() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VehicleIncoming* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VehicleIncoming));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleIncoming(
      ::google::protobuf::internal::ConstantInitialized);

  inline VehicleIncoming(const VehicleIncoming& from) : VehicleIncoming(nullptr, from) {}
  inline VehicleIncoming(VehicleIncoming&& from) noexcept
      : VehicleIncoming(nullptr, std::move(from)) {}
  inline VehicleIncoming& operator=(const VehicleIncoming& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleIncoming& operator=(VehicleIncoming&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleIncoming& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleIncoming* internal_default_instance() {
    return reinterpret_cast<const VehicleIncoming*>(
        &_VehicleIncoming_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(VehicleIncoming& a, VehicleIncoming& b) { a.Swap(&b); }
  inline void Swap(VehicleIncoming* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleIncoming* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleIncoming* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VehicleIncoming>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehicleIncoming& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VehicleIncoming& from) { VehicleIncoming::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VehicleIncoming* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "VehicleIncoming"; }

 protected:
  explicit VehicleIncoming(::google::protobuf::Arena* arena);
  VehicleIncoming(::google::protobuf::Arena* arena, const VehicleIncoming& from);
  VehicleIncoming(::google::protobuf::Arena* arena, VehicleIncoming&& from) noexcept
      : VehicleIncoming(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kThrottleFieldNumber = 2,
    kBrakeFieldNumber = 3,
    kSteerFieldNumber = 4,
    kGearFieldNumber = 5,
    kHandbrakeFieldNumber = 6,
    kReverseFieldNumber = 7,
    kManualGearShiftFieldNumber = 8,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // float throttle = 2;
  void clear_throttle() ;
  float throttle() const;
  void set_throttle(float value);

  private:
  float _internal_throttle() const;
  void _internal_set_throttle(float value);

  public:
  // float brake = 3;
  void clear_brake() ;
  float brake() const;
  void set_brake(float value);

  private:
  float _internal_brake() const;
  void _internal_set_brake(float value);

  public:
  // float steer = 4;
  void clear_steer() ;
  float steer() const;
  void set_steer(float value);

  private:
  float _internal_steer() const;
  void _internal_set_steer(float value);

  public:
  // int32 gear = 5;
  void clear_gear() ;
  ::int32_t gear() const;
  void set_gear(::int32_t value);

  private:
  ::int32_t _internal_gear() const;
  void _internal_set_gear(::int32_t value);

  public:
  // bool handbrake = 6;
  void clear_handbrake() ;
  bool handbrake() const;
  void set_handbrake(bool value);

  private:
  bool _internal_handbrake() const;
  void _internal_set_handbrake(bool value);

  public:
  // bool reverse = 7;
  void clear_reverse() ;
  bool reverse() const;
  void set_reverse(bool value);

  private:
  bool _internal_reverse() const;
  void _internal_set_reverse(bool value);

  public:
  // bool manual_gear_shift = 8;
  void clear_manual_gear_shift() ;
  bool manual_gear_shift() const;
  void set_manual_gear_shift(bool value);

  private:
  bool _internal_manual_gear_shift() const;
  void _internal_set_manual_gear_shift(bool value);

  public:
  // @@protoc_insertion_point(class_scope:VehicleIncoming)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VehicleIncoming& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    float throttle_;
    float brake_;
    float steer_;
    ::int32_t gear_;
    bool handbrake_;
    bool reverse_;
    bool manual_gear_shift_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExampleIncoming_2eproto;
};
// -------------------------------------------------------------------

class Incoming final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Incoming) */ {
 public:
  inline Incoming() : Incoming(nullptr) {}
  ~Incoming() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Incoming* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Incoming));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Incoming(
      ::google::protobuf::internal::ConstantInitialized);

  inline Incoming(const Incoming& from) : Incoming(nullptr, from) {}
  inline Incoming(Incoming&& from) noexcept
      : Incoming(nullptr, std::move(from)) {}
  inline Incoming& operator=(const Incoming& from) {
    CopyFrom(from);
    return *this;
  }
  inline Incoming& operator=(Incoming&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Incoming& default_instance() {
    return *internal_default_instance();
  }
  static inline const Incoming* internal_default_instance() {
    return reinterpret_cast<const Incoming*>(
        &_Incoming_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Incoming& a, Incoming& b) { a.Swap(&b); }
  inline void Swap(Incoming* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Incoming* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Incoming* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Incoming>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Incoming& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Incoming& from) { Incoming::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Incoming* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Incoming"; }

 protected:
  explicit Incoming(::google::protobuf::Arena* arena);
  Incoming(::google::protobuf::Arena* arena, const Incoming& from);
  Incoming(::google::protobuf::Arena* arena, Incoming&& from) noexcept
      : Incoming(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVehiclesFieldNumber = 1,
  };
  // repeated .VehicleIncoming vehicles = 1;
  int vehicles_size() const;
  private:
  int _internal_vehicles_size() const;

  public:
  void clear_vehicles() ;
  ::VehicleIncoming* mutable_vehicles(int index);
  ::google::protobuf::RepeatedPtrField<::VehicleIncoming>* mutable_vehicles();

  private:
  const ::google::protobuf::RepeatedPtrField<::VehicleIncoming>& _internal_vehicles() const;
  ::google::protobuf::RepeatedPtrField<::VehicleIncoming>* _internal_mutable_vehicles();
  public:
  const ::VehicleIncoming& vehicles(int index) const;
  ::VehicleIncoming* add_vehicles();
  const ::google::protobuf::RepeatedPtrField<::VehicleIncoming>& vehicles() const;
  // @@protoc_insertion_point(class_scope:Incoming)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Incoming& from_msg);
    ::google::protobuf::RepeatedPtrField< ::VehicleIncoming > vehicles_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExampleIncoming_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VehicleIncoming

// string name = 1;
inline void VehicleIncoming::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VehicleIncoming::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:VehicleIncoming.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehicleIncoming::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:VehicleIncoming.name)
}
inline std::string* VehicleIncoming::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:VehicleIncoming.name)
  return _s;
}
inline const std::string& VehicleIncoming::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void VehicleIncoming::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* VehicleIncoming::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* VehicleIncoming::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:VehicleIncoming.name)
  return _impl_.name_.Release();
}
inline void VehicleIncoming::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:VehicleIncoming.name)
}

// float throttle = 2;
inline void VehicleIncoming::clear_throttle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_ = 0;
}
inline float VehicleIncoming::throttle() const {
  // @@protoc_insertion_point(field_get:VehicleIncoming.throttle)
  return _internal_throttle();
}
inline void VehicleIncoming::set_throttle(float value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:VehicleIncoming.throttle)
}
inline float VehicleIncoming::_internal_throttle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.throttle_;
}
inline void VehicleIncoming::_internal_set_throttle(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_ = value;
}

// float brake = 3;
inline void VehicleIncoming::clear_brake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_ = 0;
}
inline float VehicleIncoming::brake() const {
  // @@protoc_insertion_point(field_get:VehicleIncoming.brake)
  return _internal_brake();
}
inline void VehicleIncoming::set_brake(float value) {
  _internal_set_brake(value);
  // @@protoc_insertion_point(field_set:VehicleIncoming.brake)
}
inline float VehicleIncoming::_internal_brake() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brake_;
}
inline void VehicleIncoming::_internal_set_brake(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brake_ = value;
}

// float steer = 4;
inline void VehicleIncoming::clear_steer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_ = 0;
}
inline float VehicleIncoming::steer() const {
  // @@protoc_insertion_point(field_get:VehicleIncoming.steer)
  return _internal_steer();
}
inline void VehicleIncoming::set_steer(float value) {
  _internal_set_steer(value);
  // @@protoc_insertion_point(field_set:VehicleIncoming.steer)
}
inline float VehicleIncoming::_internal_steer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steer_;
}
inline void VehicleIncoming::_internal_set_steer(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steer_ = value;
}

// int32 gear = 5;
inline void VehicleIncoming::clear_gear() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gear_ = 0;
}
inline ::int32_t VehicleIncoming::gear() const {
  // @@protoc_insertion_point(field_get:VehicleIncoming.gear)
  return _internal_gear();
}
inline void VehicleIncoming::set_gear(::int32_t value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:VehicleIncoming.gear)
}
inline ::int32_t VehicleIncoming::_internal_gear() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gear_;
}
inline void VehicleIncoming::_internal_set_gear(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gear_ = value;
}

// bool handbrake = 6;
inline void VehicleIncoming::clear_handbrake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.handbrake_ = false;
}
inline bool VehicleIncoming::handbrake() const {
  // @@protoc_insertion_point(field_get:VehicleIncoming.handbrake)
  return _internal_handbrake();
}
inline void VehicleIncoming::set_handbrake(bool value) {
  _internal_set_handbrake(value);
  // @@protoc_insertion_point(field_set:VehicleIncoming.handbrake)
}
inline bool VehicleIncoming::_internal_handbrake() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.handbrake_;
}
inline void VehicleIncoming::_internal_set_handbrake(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.handbrake_ = value;
}

// bool reverse = 7;
inline void VehicleIncoming::clear_reverse() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_ = false;
}
inline bool VehicleIncoming::reverse() const {
  // @@protoc_insertion_point(field_get:VehicleIncoming.reverse)
  return _internal_reverse();
}
inline void VehicleIncoming::set_reverse(bool value) {
  _internal_set_reverse(value);
  // @@protoc_insertion_point(field_set:VehicleIncoming.reverse)
}
inline bool VehicleIncoming::_internal_reverse() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reverse_;
}
inline void VehicleIncoming::_internal_set_reverse(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_ = value;
}

// bool manual_gear_shift = 8;
inline void VehicleIncoming::clear_manual_gear_shift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.manual_gear_shift_ = false;
}
inline bool VehicleIncoming::manual_gear_shift() const {
  // @@protoc_insertion_point(field_get:VehicleIncoming.manual_gear_shift)
  return _internal_manual_gear_shift();
}
inline void VehicleIncoming::set_manual_gear_shift(bool value) {
  _internal_set_manual_gear_shift(value);
  // @@protoc_insertion_point(field_set:VehicleIncoming.manual_gear_shift)
}
inline bool VehicleIncoming::_internal_manual_gear_shift() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.manual_gear_shift_;
}
inline void VehicleIncoming::_internal_set_manual_gear_shift(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.manual_gear_shift_ = value;
}

// -------------------------------------------------------------------

// Incoming

// repeated .VehicleIncoming vehicles = 1;
inline int Incoming::_internal_vehicles_size() const {
  return _internal_vehicles().size();
}
inline int Incoming::vehicles_size() const {
  return _internal_vehicles_size();
}
inline void Incoming::clear_vehicles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicles_.Clear();
}
inline ::VehicleIncoming* Incoming::mutable_vehicles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Incoming.vehicles)
  return _internal_mutable_vehicles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::VehicleIncoming>* Incoming::mutable_vehicles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Incoming.vehicles)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_vehicles();
}
inline const ::VehicleIncoming& Incoming::vehicles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Incoming.vehicles)
  return _internal_vehicles().Get(index);
}
inline ::VehicleIncoming* Incoming::add_vehicles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::VehicleIncoming* _add = _internal_mutable_vehicles()->Add();
  // @@protoc_insertion_point(field_add:Incoming.vehicles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::VehicleIncoming>& Incoming::vehicles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Incoming.vehicles)
  return _internal_vehicles();
}
inline const ::google::protobuf::RepeatedPtrField<::VehicleIncoming>&
Incoming::_internal_vehicles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicles_;
}
inline ::google::protobuf::RepeatedPtrField<::VehicleIncoming>*
Incoming::_internal_mutable_vehicles() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.vehicles_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ExampleIncoming_2eproto_2epb_2eh
